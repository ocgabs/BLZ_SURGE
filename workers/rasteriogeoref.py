# -*- coding: utf-8 -*-
"""Copy of RasterioGeoRef.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/116_1Zx15SidjZiTpSZgWIrJGvdeBlyWv


pip install rasterio

pip install netCDF4

pip install shapely
"""

import matplotlib.pyplot as plt
import numpy as np
import rasterio
import xarray as xr
from rasterio.plot import show
from rasterio.crs import CRS
import netCDF4 as nc
import shapely.geometry as geom
from argparse import ArgumentParser
import yaml
from descartes.patch import PolygonPatch
import os
import datetime
import requests
import bs4

def main():
    # parse command line args
    parser = ArgumentParser(description='created seeding from sargassium products')
    parser.add_argument('config_location', help='location of YAML config file')
    args = parser.parse_args()
    config = read_yaml(args.config_location)
    day_now = UtcNow()
    # Download Sargassium product and return filename of downloaded product
    get_sar = get_sargassium(config,day_now)# creates the current time and date in the form of a dictionary
    if type(get_sar) == int:
        print('Error Code: '+str(get_sar))
        print('get sargassium product failed, refer to error code printed above')
        return 'get_sar error'
    if type(get_sar) != str:
        print(type(get_sar))
        print('unexpected return from getting sargassium product expected string')
        return 'get_sar_error'
    # Download the file

    trans_sar = transform_sargassium(config,get_sar)
    if trans_sar != 0:
        print('Error Code: '+str(trans_sar))
        print('transformation of sargassium product failed, program terminating...')
        return 'transform_sar error'
    if type(trans_sar) != int:
        print(type(trans_sar))
        print('unexpected return from transforming sargassium product, expected int')
        return 'transform_sar error'

    data = rasterio.open(config['seed']['parcels']['dest_dir']+config['seed']['parcels']['tiff_name'])
    sband = data.read(1)

    #Rasterio plotting only works for raterio.open (ed) data
    if config['seed']['parcels']['plot'] == True:
        show((data,1), cmap='terrain')
        data.nodatavals

    #To check that the transform looks correct!
    #Return the west, south, east, north bounds of an array given its height, width, and an affine
    #rasterio.transform.array_bounds(band1.shape[0], band1.shape[1], transforma3)
    #Return the bounds of an array given height, width, and a transform.
    #(-90.0, 15.875, -80.85714285714286, 22.0

    #data.xy(data.width, data.height) #This gives min -81.99 better than above -80.85
    if config['seed']['parcels']['plot'] == True:
        # Read the geoTiff as xarray (LET ME SEE THE DATA!!!)
        da = xr.open_rasterio(config['seed']['parcels']['dest_dir']+config['seed']['parcels']['tiff_name'])
        da.head()
        #print(da.x)

        # Rough Plot on a map (*not proper lon/lat projection), got an error installing cartopy
        #no idea how to put a colorbar with the rasterio ploting function...
        fig, ax0 = plt.subplots(nrows=1,figsize=(10, 6))
        im=ax0.pcolormesh(da.x, da.y,sband)
        fig.colorbar(im, ax=ax0)
        plt.show()
        np.unique(sband)

    #FIND pixels with sargassum
    spx,spy =np.where((sband <252) & (sband>0))
    spx.size
    #will be good to read more about the product to know what the different values mean!

    #Get locations with Sargasso
    #Acumuladores
    slo= np.array([])
    sla= np.array([])
    # Loop through your list of coords
    for i in range(0,spx.size):
        # Get pixel coordinates from map coordinates
        lo, la = data.xy(spx[i], spy[i])
        slo=np.append(slo,lo)
        sla=np.append(sla,la)
        #print('Pixel Y, X coords: {}, {}'.format(py, px))

    #Make a shapley multipoint with the sargasso locations
    spoints = geom.MultiPoint((np.array([slo, sla]).T).tolist())

    len(spoints)

    #Read in NEMO grid
    bathy = config['seed']['parcels']['bathy_meter']
    bat = nc.Dataset(bathy)
    lat = bat['nav_lat'][:]
    lon = bat['nav_lon'][:]
    h = bat['Bathymetry'][:]


    if config['seed']['parcels']['plot'] == True:
        # Rough Plot on a map (*not proper lon/lat projection)
        fig, ax0 = plt.subplots(nrows=1)
        im=ax0.pcolormesh(lon, lat,h)
        fig.colorbar(im, ax=ax0)
        plt.show()
        bat.close()

    #Find lola of model domain perimeter
    lon=np.array(lon)
    lat=np.array(lat)
    plo=np.concatenate((lon[:,0],lon[-1,:],np.flipud(lon[:,-1]),np.flipud(lon[0,:])), axis=0)
    pla=np.concatenate((lat[:,0],lat[-1,:],np.flipud(lat[:,-1]),np.flipud(lat[0,:])), axis=0)

    #Needs to be a shaply polygon to intersect them with the locations with Sargasso
    #To get it into shaply format:
    # give plo and pla an extra empty dimension
    plo = plo[:, np.newaxis]
    pla = pla[:, np.newaxis]

    # combine x y arrays into a two dimensional sequence of coordinates
    coord = np.append(plo, pla, axis=1)

    # make a shapley polygon
    nbox = geom.Polygon(coord)

    # Now find the locations (slo, sla) with Sargaso inside the NEMO domain (nbox)
    sloc_range = np.zeros(slo.size, dtype=bool)
    for i in range(slo.size):
      sloc_range[i] = nbox.contains(spoints[i])

    if config['seed']['parcels']['plot'] == True:
        # plotting!
        fig, (ax1) = plt.subplots(nrows=1)

        ax1.plot(slo[sloc_range], sla[sloc_range], '.r', ms=10, zorder=3)
        patch = PolygonPatch(nbox, facecolor='k', alpha=0.5, zorder=1)
        ax1.add_patch(patch)
        ax1.plot(slo, sla, '.b', ms=10, zorder=2)

    sum(sloc_range)
    slo[sloc_range]
    sla[sloc_range]

    np.save(config['seed']['parcels']['dest_dir']+'slo',slo)
    np.save(config['seed']['parcels']['dest_dir'] + 'sla', sla)

    print('The End')
    return 0

'''Read in config file with all parameters required'''
def read_yaml(YAML_loc):
    # safe load YAML file, if file is not present raise exception
    if not os.path.isfile(YAML_loc):
        print('DONT PANIC: The yaml file specified does not exist')
        return 1
    with open(YAML_loc) as f:
        config = yaml.safe_load(f)
    return config

#Function to calculate the current year, month, day and hour in UTC time
def UtcNow():
    now = datetime.datetime.utcnow()
    now = now.timetuple()
    year = '{0:04}'.format(now.tm_year)
    month = '{0:02}'.format(now.tm_mon)
    day = '{0:02}'.format(now.tm_mday)
    hour = '{0:02}'.format(now.tm_hour)
    day_year = '{0:03}'.format(now.tm_yday)
    day_year_wk = '{0:03}'.format(now.tm_yday - now.tm_mday)
    return {'year': year, 'month': month, 'day': day, 'hour': hour, 'day_year': day_year, 'day_year_wk': day_year_wk}

def get_sargassium(config,day_now):
    url_template = config['seed']['parcels']['url_template']
    parse_ID = config['seed']['parcels']['parse_ID']
    url = url_template.format(**day_now)
    r = requests.get(url)
    # TODO: will this work at start of year?
    if r.status_code != 200:
        print('error in requesting sargassium year directory URL')
        if day_now['month'] == '01' and day_now['day'] == '01' or '02' or '03':
            print('Request failed and current day Jan 3rd or earlier so current year may not exist yet')
            print('Trying previous year now.....')
            day_now_last_year = day_now
            day_now_last_year['year'] = int(day_now['year'])-1
            url = url_template.format(**day_now_last_year)
            r = requests.get(url)
            if r.status_code != 200:
                print('previous year request also failed, terminating program')
                return 1
        return 2
    data = bs4.BeautifulSoup(r.text, "html.parser")
    ext = ''
    parent = [url + node.get('href') for node in data.find_all('a') if node.get('href').endswith(ext)]
    url = parent[-1]
    r = requests.get(url)
    if r.status_code != 200:
        print('error in requesting sargassium latest directory URL')
        return 3
    data = bs4.BeautifulSoup(r.text, "html.parser")
    for l in data.find_all("a"):
        if parse_ID in l.text:
            dataset_name = (l["href"])
    response = requests.get(url+dataset_name)
    if r.status_code != 200:
        print('error in requesting sargassium image URL')
        return 4
    file_name = config['seed']['parcels']["dest_dir"]+dataset_name
    try:
        with open(file_name, 'wb') as f:
            f.write(response.content)
    except IOError:
        print('Unable to write image to directory, does it exist? Permissions?')
        return 5

    return file_name

def transform_sargassium(config,get_sar):
    # Read the image with rasterio
    dataset = rasterio.open(get_sar)
    band1 = dataset.read(1) #this is the actual data

    #crs needs to be created with this, or other CRS.method i.e. from_string, etc
    crs=CRS.from_proj4(config['seed']['parcels']['crs'])

    #This transformation is what worked in the end to georeference
    transforma3= rasterio.transform.from_bounds(config['seed']['parcels']['west'], config['seed']['parcels']['south'], config['seed']['parcels']['east'], config['seed']['parcels']['north'], dataset.shape[0], dataset.shape[1])

    #Georeferencing the image! savc it again as a geoTiff
    try:
        with rasterio.open(config['seed']['parcels']['dest_dir']+config['seed']['parcels']['tiff_name'],'w',driver='GTiff',height=band1.shape[0],width=band1.shape[1],count=1, dtype='uint8',crs=crs,transform=transforma3,)as dst:
            dst.write(band1, 1)
    except IOError:
        print('Unable to save transformed image.....')
        return 1
    return 0

if __name__ == '__main__':
    main()